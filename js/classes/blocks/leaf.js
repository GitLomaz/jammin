class Leaf extends Block {
  constructor(x, y, angle = false) {
    super(x, y);

    if (!angle) {
      angle = Random.between(0, 360);
    }
    this.shade = Random.between(1, 3);
    this.health = this.shade;
    this.score = 50;

    this.shape = [[29, 0], [28, 1], [27, 2], [26, 3], [25, 4], [24, 5], [23, 5], [22, 6], [22, 7], [22, 8], [21, 9], [20, 9], [19, 8], [18, 7], [17, 7], [16, 7], [16, 8], [16, 9], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 15], [16, 16], [16, 17], [16, 18], [16, 19], [16, 20], [15, 21], [14, 21], [13, 21], [12, 21], [11, 21], [10, 21], [9, 21], [8, 21], [7, 21], [6, 21], [5, 21], [4, 21], [3, 21], [2, 21], [1, 21], [1, 22], [1, 23], [1, 24], [1, 25], [1, 26], [2, 27], [1, 28], [1, 29], [1, 30], [1, 31], [2, 32], [3, 33], [3, 34], [2, 35], [2, 36], [3, 37], [4, 37], [5, 38], [6, 39], [7, 40], [8, 40], [9, 41], [10, 41], [11, 41], [12, 42], [13, 43], [13, 44], [12, 45], [11, 45], [10, 46], [9, 47], [8, 47], [7, 48], [7, 49], [7, 50], [6, 51], [5, 52], [4, 53], [3, 54], [3, 55], [4, 55], [5, 56], [6, 55], [7, 55], [8, 55], [9, 55], [10, 55], [11, 55], [12, 55], [13, 56], [14, 55], [15, 55], [16, 55], [17, 54], [18, 54], [19, 54], [20, 55], [21, 54], [22, 54], [23, 54], [24, 53], [25, 52], [26, 52], [27, 52], [28, 52], [29, 53], [30, 54], [31, 55], [32, 56], [33, 57], [34, 58], [35, 58], [36, 59], [37, 59], [38, 59], [39, 59], [40, 58], [40, 57], [40, 56], [41, 55], [42, 55], [43, 55], [44, 55], [45, 55], [46, 55], [47, 55], [48, 55], [49, 55], [50, 55], [51, 55], [52, 55], [53, 55], [54, 55], [55, 56], [56, 55], [57, 55], [57, 54], [56, 53], [55, 53], [54, 52], [53, 51], [53, 50], [53, 49], [53, 48], [52, 47], [51, 47], [50, 46], [49, 45], [49, 44], [49, 43], [49, 42], [50, 41], [51, 40], [52, 40], [53, 39], [54, 39], [55, 38], [56, 37], [57, 37], [58, 36], [58, 35], [57, 34], [57, 33], [58, 32], [59, 31], [59, 30], [59, 29], [59, 28], [59, 27], [59, 26], [59, 25], [59, 24], [59, 23], [59, 22], [59, 21], [58, 21], [57, 21], [56, 21], [55, 21], [54, 21], [53, 21], [52, 21], [51, 21], [50, 21], [49, 21], [48, 21], [47, 21], [46, 21], [45, 20], [45, 19], [45, 18], [45, 17], [45, 16], [45, 15], [45, 14], [45, 13], [45, 12], [45, 11], [45, 10], [45, 9], [45, 8], [45, 7], [44, 7], [43, 7], [42, 7], [41, 8], [40, 9], [39, 9], [38, 8], [38, 7], [38, 6], [37, 5], [36, 5], [35, 4], [34, 3], [33, 2], [32, 1], [31, 0], [30, 0]]
    const verts = this.shape.map(([x, y]) => ({ x, y }));

    // Matter body from vertices
    this.body = scene.matter.add.fromVertices(x, y, verts, {
      restitution: 0,
      friction: 0,
      isStatic: true
    });
    scene.matter.body.setAngle(this.body, Phaser.Math.DegToRad(angle));

    this.sprite = scene.add.image(2, -2, 'leaf' + Random.between(1, 3));
    this.sprite.setAngle(angle);
    this.add(this.sprite);

    scene.add.existing(this);
  }

  die() {
    scene.remove.existing(this);
  }

  hit() {
    this.health -= 1;
    if (this.health <= 0) {
      this.die();
    }
  }
}